diff --git a/run.py b/run.py
index 2d66149..0fdc5f2 100644
--- a/run.py
+++ b/run.py
@@ -5,6 +5,7 @@ import time
 import json
 import sys
 import argparse
+import uuid
 
 import boto3
 from boto3.dynamodb.conditions import Key, Attr
@@ -275,7 +276,7 @@ def run_single_query(table, hash_id, limit, exclusive_start_key=None):
     print('\tExclusive start key: {}'.format(exclusive_start_key))
 
     query_args = {
-        'KeyConditionExpression': Key('hash_id').eq(hash_id),
+#        'KeyConditionExpression': Key('hash_id').eq(hash_id),
         'Limit': limit,
         'ReturnConsumedCapacity': 'TOTAL'
     }
@@ -284,7 +285,8 @@ def run_single_query(table, hash_id, limit, exclusive_start_key=None):
         query_args['ExclusiveStartKey'] = exclusive_start_key
 
     start_time = time.time()
-    response =  table.query(**query_args)
+    #response =  table.query(**query_args)
+    response =  table.scan(**query_args)
     response['elapsed_time'] = (time.time() - start_time) * 1000
     response['item_bytes'] = get_query_response_size_in_bytes(response['Items'])
 
@@ -573,7 +575,7 @@ def seed_table(table, schemaFile, hash_id, item_count):
                 write_count += 1
                 # pad sort ID with zeroes, since its a string
                 sort_id = str(write_count).zfill(10)  
-                item = getRandomAttributeFromSchema(hash_id, sort_id, schema)
+                item = getRandomAttributeFromSchema(str(uuid.uuid4()), sort_id, schema)
                 batch.put_item(Item=item)    
         elapsed_time = (time.time() - start_time) * 1000
         print("Wrote {} items to table in {:,.1f} ms.".format(
